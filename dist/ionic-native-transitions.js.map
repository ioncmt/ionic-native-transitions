{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 758c31f439c2f8be6621","webpack:///./lib/index.js","webpack:///d:/git/ionic-native-transitions/lib/index.js","webpack:///./lib/provider.js","webpack:///d:/git/ionic-native-transitions/lib/provider.js","webpack:///./lib/nativeSref.js","webpack:///d:/git/ionic-native-transitions/lib/nativeSref.js","webpack:///./lib/run.js","webpack:///d:/git/ionic-native-transitions/lib/run.js"],"names":[],"mappings":"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","file":"ionic-native-transitions.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ionicNativeTransitions\"] = factory();\n\telse\n\t\troot[\"ionicNativeTransitions\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 758c31f439c2f8be6621\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _providerJs = require('./provider.js');\n\nvar _providerJs2 = _interopRequireDefault(_providerJs);\n\nvar _nativeSrefJs = require('./nativeSref.js');\n\nvar _nativeSrefJs2 = _interopRequireDefault(_nativeSrefJs);\n\nvar _runJs = require('./run.js');\n\nvar _runJs2 = _interopRequireDefault(_runJs);\n\nvar mod = angular.module('ionic-native-transitions', ['ionic', 'ui.router']);\n\nmod.directive('nativeUiSref', _nativeSrefJs2['default']);\nmod.provider('$ionicNativeTransitions', _providerJs2['default']);\nmod.run(_runJs2['default']);\n\nexports['default'] = mod = mod.name;\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./lib/index.js\n **/","import Provider from './provider.js';\r\nimport nativeSref from './nativeSref.js';\r\nimport Run from './run.js';\r\n\r\nlet mod = angular.module('ionic-native-transitions', [\r\n    'ionic',\r\n    'ui.router'\r\n]);\r\n\r\nmod.directive('nativeUiSref', nativeSref);\r\nmod.provider('$ionicNativeTransitions', Provider);\r\nmod.run(Run);\r\n\r\nexport default mod = mod.name;\r\n\n\n\n/** WEBPACK FOOTER **\n ** d:/git/ionic-native-transitions/lib/index.js\n **/","/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitions\r\n * @description\r\n * ionic-native-transitions service\r\n */\n/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\r\n * @description\r\n * ionic-native-transitions provider\r\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nexports['default'] = function () {\n    'ngInject';\n\n    var enabled = true,\n        $stateChangeStart = null,\n        $stateChangeSuccess = null,\n        $stateChangeError = null,\n        $stateAfterEnter = null,\n        oppositeDirections = {\n        up: 'down',\n        down: 'up',\n        left: 'right',\n        right: 'left'\n    },\n        defaultTransition = {\n        type: 'slide',\n        direction: 'left'\n    },\n        defaultBackTransition = {\n        type: 'slide',\n        direction: 'right'\n    },\n        defaultOptions = {\n        duration: 400, // in milliseconds (ms), default 400,\n        slowdownfactor: 4, // overlap views (higher number is more) or no overlap (1), default 4\n        iosdelay: -1, // ms to wait for the iOS webview to update before animation kicks in, default -1\n        androiddelay: -1, // same as above but for Android, default -1\n        winphonedelay: -1, // same as above but for Windows Phone, default -1,\n        fixedPixelsTop: 0, // the number of pixels of your fixed header, default 0 (iOS and Android)\n        fixedPixelsBottom: 0, // the number of pixels of your fixed footer (f.i. a tab bar), default 0 (iOS and Android),\n        triggerTransitionEvent: '$ionicView.afterEnter', // internal ionic-native-transitions option\n        backInOppositeDirection: false, // Disable default back transition and uses the opposite transition to go back\n        hasAlreadyRegisterBackButtonAction: false // if you have already registered an action on registerBackButtonAction\n    };\n\n    return {\n        $get: $get,\n        enable: enable,\n        setDefaultTransition: setDefaultTransition,\n        setDefaultBackTransition: setDefaultBackTransition,\n        setDefaultOptions: setDefaultOptions\n    };\n\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#enable\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default nativepagetransitions plugin options\r\n     * @param {object} injectedOptions  options that will overwrite defaults\r\n     */\n    function enable() {\n        var enabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n        enable = enabled;\n        return this;\n    }\n\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#isEnabled\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Is ionic-native-transitions enabled or not?\r\n     */\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitions#isEnabled\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n     *\r\n     * @description\r\n     * Is ionic-native-transitions enabled or not?\r\n     */\n    function isEnabled() {\n        if (window.cordova && window.plugins && window.plugins.nativepagetransitions) {\n            return enable;\n        }\n        return false;\n    }\n\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultOptions\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default nativepagetransitions plugin options\r\n     * @param {object} injectedOptions  options that will overwrite defaults\r\n     */\n    function setDefaultOptions() {\n        var injectedOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        angular.extend(defaultOptions, injectedOptions);\n        return this;\n    }\n\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultTransition\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default transitions\r\n     * @param {object} transitionOptions  options that will overwrite defaults\r\n     */\n    function setDefaultTransition() {\n        var transition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        angular.extend(defaultTransition, transition);\n        return this;\n    }\n\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultBackTransition\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default back transitions\r\n     * @param {object} transitionOptions  options that will overwrite defaults\r\n     */\n    function setDefaultBackTransition() {\n        var transition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        angular.extend(defaultBackTransition, transition);\n        return this;\n    }\n\n    function $get($log, $ionicConfig, $rootScope, $timeout, $state, $location, $ionicHistory, $ionicPlatform) {\n        'ngInject';\n\n        var legacyGoBack = undefined,\n            backButtonUnregister = undefined;\n\n        return {\n            init: init,\n            getDefaultOptions: getDefaultOptions,\n            enable: enableFromService,\n            isEnabled: isEnabled,\n            transition: transition,\n            registerToRouteEvents: registerToRouteEvents,\n            unregisterToRouteEvents: unregisterToRouteEvents,\n            registerToStateChangeStartEvent: registerToStateChangeStartEvent,\n            unregisterToStateChangeStartEvent: unregisterToStateChangeStartEvent,\n            disablePendingTransition: disablePendingTransition,\n            locationUrl: locationUrl,\n            stateGo: stateGo,\n            goBack: goBack\n        };\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#locationUrl\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Call location url and apply a native transition\r\n         * @param {string|null} url                 default:null\r\n         * @param {object|null} transitionOptions   default:null\r\n         */\n        function locationUrl() {\n            var url = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n            var transitionOptions = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n            if (!url) {\n                $log.debug('[native transition] cannot change url without url...');\n                return;\n            }\n            unregisterToStateChangeStartEvent();\n            var locationPromise = $location.url(url);\n            transition(transitionOptions);\n\n            return locationPromise;\n        }\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#stateGo\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Call state go and apply a native transition\r\n         * @param {string|null} state              default:null\r\n         * @param {object}      stateParams        default:{}\r\n         * @param {object}      stateOptions       default:{}\r\n         * @param {object|null} transitionOptions  default:null\r\n         */\n        function stateGo() {\n            var state = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n            var stateParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n            var stateOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n            var transitionOptions = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n            if (!state) {\n                $log.debug('[native transition] cannot change state without a state...');\n                return;\n            }\n            if ($state.current.name === state && !stateOptions.reload) {\n                $log.debug('[native transition] same state transition are not possible');\n                return;\n            }\n            unregisterToStateChangeStartEvent();\n            transition(transitionOptions);\n            return $timeout(function () {\n                return $state.go(state, stateParams, stateOptions);\n            });\n        }\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#enable\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * enable/disable plugin\r\n         * @param {boolean} enabled\r\n         * @param {boolean} disableIonicTransitions\r\n         * @param {string}  ionicTransitionType\r\n         */\n        function enableFromService() {\n            var enabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n            var disableIonicTransitions = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n            var ionicTransitionType = arguments.length <= 2 || arguments[2] === undefined ? 'platform' : arguments[2];\n\n            if (enabled && !(window.cordova && window.plugins && window.plugins.nativepagetransitions)) {\n                $log.debug('[native transition] is disabled or nativepagetransitions plugin is not present');\n                return;\n            }\n            enable = enabled;\n\n            if (enabled) {\n                $log.debug('[native transition] enabling plugin');\n                if (window.plugins && window.plugins.nativepagetransitions) {\n                    angular.extend(window.plugins.nativepagetransitions.globalOptions, getDefaultOptions());\n                }\n                $rootScope.$ionicGoBack = goBack;\n                if (!getDefaultOptions().hasAlreadyRegisterBackButtonAction) {\n                    backButtonUnregister = $ionicPlatform.registerBackButtonAction(function (e, count) {\n                        return goBack(count);\n                    }, 100);\n                }\n                registerToRouteEvents();\n            } else {\n                $log.debug('[native transition] disabling plugin');\n                if (typeof arguments[1] === 'undefined') {\n                    disableIonicTransitions = false;\n                }\n                $rootScope.$ionicGoBack = legacyGoBack;\n                if (angular.isFunction(backButtonUnregister)) {\n                    backButtonUnregister.call();\n                }\n                unregisterToRouteEvents();\n            }\n\n            if (disableIonicTransitions) {\n                $log.debug('[native transition] disabling ionic transitions');\n                $ionicConfig.views.transition('none');\n            } else {\n                $log.debug('[native transition] enabling ionic transitions');\n                $ionicConfig.views.transition(ionicTransitionType);\n            }\n\n            return this;\n        }\n\n        function transition() {\n            if (!isEnabled()) {\n                return;\n            }\n            var options = {};\n            if (angular.isObject(arguments[0])) {\n                options = angular.extend({}, defaultBackTransition, arguments[0]);\n            } else if (angular.isString(arguments[0])) {\n                switch (arguments[0]) {\n                    case 'back':\n                        // First we check for state back transition\n                        if (arguments[2] && getBackStateTransition(arguments[2])) {\n                            options = getBackStateTransition(arguments[2]);\n                            console.log('back first', options);\n                        } // Then we check if the backInOppositeDirection option is enabled\n                        else if (getDefaultOptions().backInOppositeDirection && arguments[1] && getStateTransition(arguments[1])) {\n                                options = getStateTransition(arguments[1]);\n                                if (options.direction) {\n                                    options.direction = oppositeDirections[options.direction];\n                                }\n                                console.log('back second', options);\n                            } // otherwise we just use the default transition\n                            else {\n                                    options = defaultBackTransition;\n                                    console.log('back default', options);\n                                }\n                        break;\n                }\n            } else {\n                options = defaultTransition;\n            }\n            options = angular.copy(options);\n            $log.debug('[native transition]', options);\n            var type = options.type;\n            delete options.type;\n            $rootScope.$broadcast('ionicNativeTransitions.beforeTransition');\n            window.plugins.nativepagetransitions[type](options, transitionSuccess.bind(this, getTransitionDuration(options)), transitionError.bind(this, getTransitionDuration(options)));\n        }\n\n        function transitionSuccess(duration) {\n            setTimeout(function () {\n                return $rootScope.$broadcast('ionicNativeTransitions.success');\n            }, duration);\n        }\n\n        function transitionError(duration) {\n            setTimeout(function () {\n                return $rootScope.$broadcast('ionicNativeTransitions.error');\n            }, duration);\n        }\n\n        function getTransitionDuration(options) {\n            var duration = undefined;\n            if (options.duration) {\n                duration = parseInt(options.duration);\n            } else {\n                duration = parseInt(getDefaultOptions().duration);\n            }\n            if (ionic.Platform.isAndroid()) {\n                if (options.androiddelay) {\n                    duration += parseInt(options.androiddelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().androiddelay);\n                }\n            } else if (ionic.Platform.isIOS()) {\n                if (options.iosdelay) {\n                    duration += parseInt(options.iosdelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().iosdelay);\n                }\n            } else if (ionic.Platform.isWindowsPhone()) {\n                if (options.winphonedelay) {\n                    duration += parseInt(options.winphonedelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().winphonedelay);\n                }\n            }\n            return duration;\n        }\n\n        function executePendingTransition() {\n            window.plugins.nativepagetransitions.executePendingTransition();\n            // $rootScope.$broadcast('ionicNativeTransitions.', executePendingTransition);\n            registerToStateChangeStartEvent();\n        }\n\n        function disablePendingTransition() {\n            // If native transition support cancelling transition (> 0.6.4), cancel pending transition\n            if (window.plugins && window.plugins.nativepagetransitions && angular.isFunction(window.plugins.nativepagetransitions.cancelPendingTransition)) {\n                window.plugins.nativepagetransitions.cancelPendingTransition();\n                registerToStateChangeStartEvent();\n            } else {\n                executePendingTransition();\n            }\n        }\n\n        function registerToRouteEvents() {\n            unregisterToRouteEvents();\n            registerToStateChangeStartEvent();\n            // $stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', executePendingTransition);\n            $stateChangeError = $rootScope.$on('$stateChangeError', disablePendingTransition);\n            $stateAfterEnter = $rootScope.$on(getDefaultOptions().triggerTransitionEvent, executePendingTransition);\n        }\n\n        function registerToStateChangeStartEvent() {\n            if ($stateChangeStart) {\n                return;\n            }\n            $stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                var options = null;\n                // Abort if event was preventDefault'ed\n                if (event.defaultPrevented) {\n                    return;\n                }\n                // Disable native transition for this state\n                if (toState.nativeTransitions === null) {\n                    $log.debug('[native transition] transition disabled for this state', toState);\n                    return;\n                }\n                options = getStateTransition(toState);\n                $log.debug('[native transition] $stateChangeStart', toState, options);\n                transition(options);\n            });\n        }\n\n        function getBackStateTransition(state) {\n            if (angular.isObject(state.nativeTransitionsBackIOS) && ionic.Platform.isIOS()) {\n                return angular.extend({}, state.nativeTransitionsBackIOS);\n            } else if (angular.isObject(state.nativeTransitionsBackAndroid) && ionic.Platform.isAndroid()) {\n                return angular.extend({}, state.nativeTransitionsBackAndroid);\n            } else if (angular.isObject(state.nativeTransitionsBackWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n                return angular.extend({}, state.nativeTransitionsBackWindowsPhone);\n            } else if (angular.isObject(state.nativeTransitionsBack)) {\n                return angular.extend({}, state.nativeTransitionsBack);\n            }\n            return null;\n        }\n\n        function getStateTransition(state) {\n            if (angular.isObject(state.nativeTransitionsIOS) && ionic.Platform.isIOS()) {\n                return angular.extend({}, state.nativeTransitionsIOS);\n            } else if (angular.isObject(state.nativeTransitionsAndroid) && ionic.Platform.isAndroid()) {\n                return angular.extend({}, state.nativeTransitionsAndroid);\n            } else if (angular.isObject(state.nativeTransitionsWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n                return angular.extend({}, state.nativeTransitionsWindowsPhone);\n            } else if (angular.isObject(state.nativeTransitions)) {\n                return angular.extend({}, state.nativeTransitions);\n            }\n            return null;\n        }\n\n        function unregisterToStateChangeStartEvent() {\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n                $stateChangeStart();\n                $stateChangeStart = null;\n            }\n        }\n\n        function unregisterToRouteEvents() {\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n                $stateChangeStart();\n                $stateChangeStart = null;\n            }\n            if ($stateChangeSuccess && angular.isFunction($stateChangeSuccess)) {\n                $stateChangeSuccess();\n                $stateChangeSuccess = null;\n            }\n            if ($stateChangeError && angular.isFunction($stateChangeError)) {\n                $stateChangeError();\n                $stateChangeError = null;\n            }\n            if ($stateAfterEnter && angular.isFunction($stateAfterEnter)) {\n                $stateAfterEnter();\n                $stateAfterEnter = null;\n            }\n        }\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#getDefaultOptions\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Get default options\r\n         */\n        function getDefaultOptions() {\n            return defaultOptions;\n        }\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#init\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Init nativepagetransitions plugin\r\n         */\n        function init() {\n            legacyGoBack = $rootScope.$ionicGoBack;\n            if (!isEnabled()) {\n                $log.debug('[native transition] The plugin is either disabled or nativepagetransitions plugin by telerik is not present. If you are getting this message in a browser, this is normal behavior, native transitions only work on device.');\n                return;\n            } else {\n                enableFromService();\n            }\n        }\n\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#goBack\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         * @description Navigate back in the current history stack with a back navigation transition\r\n         * @param {number} backCount - The number of views to go back to. default will be the previous view\r\n         */\n        function goBack(backCount) {\n\n            if (!$ionicHistory.backView()) {\n                // Close the app when no more history\n                if (navigator.app) {\n                    navigator.app.exitApp();\n                }\n                return;\n            }\n            if (backCount >= 0) {\n                return;\n            }\n            var stateName = $ionicHistory.backView().stateName;\n\n            // Use backCount to find next state only if its defined, else pass as it is to $ionicHistory.goBack\n            // which defaults to previous view transition\n            // Get current history stack and find the cursor for the new view\n            // Based on the new cursor, find the new state to transition to\n            if (!!backCount && !isNaN(parseInt(backCount))) {\n                var viewHistory = $ionicHistory.viewHistory();\n                var currentHistory = viewHistory.histories[$ionicHistory.currentView().historyId];\n                var newCursor = currentHistory.cursor + backCount;\n\n                // If new cursor is more than the max possible or less than zero, default it to first view in history\n                if (newCursor < 0 || newCursor > currentHistory.stack.length) {\n                    newCursor = 0;\n                }\n\n                stateName = currentHistory.stack[newCursor].stateName;\n            }\n            var currentStateTransition = angular.extend({}, $state.current);\n            var toStateTransition = angular.extend({}, $state.get(stateName));\n\n            unregisterToStateChangeStartEvent();\n            if (toStateTransition.nativeTransitionsBack === null) {\n                $log.debug('[native transition] transition disabled for this state', toStateTransition);\n                return $timeout(function () {\n                    return $ionicHistory.goBack(backCount);\n                }).then(function () {\n                    return registerToStateChangeStartEvent();\n                });\n            }\n            $log.debug('nativepagetransitions goBack', backCount, stateName, currentStateTransition, toStateTransition);\n            transition('back', currentStateTransition, toStateTransition);\n            return $timeout(function () {\n                return $ionicHistory.goBack(backCount);\n            });\n        }\n    }\n};\n\n;\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./lib/provider.js\n **/","/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitions\r\n * @description\r\n * ionic-native-transitions service\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\r\n * @description\r\n * ionic-native-transitions provider\r\n */\r\nexport default function () {\r\n    'ngInject';\r\n\r\n    let enabled = true,\r\n        $stateChangeStart = null,\r\n        $stateChangeSuccess = null,\r\n        $stateChangeError = null,\r\n        $stateAfterEnter = null,\r\n        oppositeDirections = {\r\n            up: 'down',\r\n            down: 'up',\r\n            left: 'right',\r\n            right: 'left'\r\n        },\r\n        defaultTransition = {\r\n            type: 'slide',\r\n            direction: 'left'\r\n        },\r\n        defaultBackTransition = {\r\n            type: 'slide',\r\n            direction: 'right'\r\n        },\r\n        defaultOptions = {\r\n            duration: 400, // in milliseconds (ms), default 400,\r\n            slowdownfactor: 4, // overlap views (higher number is more) or no overlap (1), default 4\r\n            iosdelay: -1, // ms to wait for the iOS webview to update before animation kicks in, default -1\r\n            androiddelay: -1, // same as above but for Android, default -1\r\n            winphonedelay: -1, // same as above but for Windows Phone, default -1,\r\n            fixedPixelsTop: 0, // the number of pixels of your fixed header, default 0 (iOS and Android)\r\n            fixedPixelsBottom: 0, // the number of pixels of your fixed footer (f.i. a tab bar), default 0 (iOS and Android),\r\n            triggerTransitionEvent: '$ionicView.afterEnter', // internal ionic-native-transitions option\r\n            backInOppositeDirection: false, // Disable default back transition and uses the opposite transition to go back\r\n            hasAlreadyRegisterBackButtonAction: false // if you have already registered an action on registerBackButtonAction\r\n        };\r\n\r\n    return {\r\n        $get,\r\n        enable,\r\n        setDefaultTransition,\r\n        setDefaultBackTransition,\r\n        setDefaultOptions\r\n    };\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#enable\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default nativepagetransitions plugin options\r\n     * @param {object} injectedOptions  options that will overwrite defaults\r\n     */\r\n    function enable(enabled = true) {\r\n        enable = enabled;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#isEnabled\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Is ionic-native-transitions enabled or not?\r\n     */\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitions#isEnabled\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n     *\r\n     * @description\r\n     * Is ionic-native-transitions enabled or not?\r\n     */\r\n    function isEnabled() {\r\n        if (window.cordova && window.plugins && window.plugins.nativepagetransitions) {\r\n            return enable;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultOptions\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default nativepagetransitions plugin options\r\n     * @param {object} injectedOptions  options that will overwrite defaults\r\n     */\r\n    function setDefaultOptions(injectedOptions = {}) {\r\n        angular.extend(defaultOptions, injectedOptions);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultTransition\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default transitions\r\n     * @param {object} transitionOptions  options that will overwrite defaults\r\n     */\r\n    function setDefaultTransition(transition = {}) {\r\n        angular.extend(defaultTransition, transition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultBackTransition\r\n     * @access public\r\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\r\n     *\r\n     * @description\r\n     * Overwrite default back transitions\r\n     * @param {object} transitionOptions  options that will overwrite defaults\r\n     */\r\n    function setDefaultBackTransition(transition = {}) {\r\n        angular.extend(defaultBackTransition, transition);\r\n        return this;\r\n    }\r\n\r\n    function $get($log, $ionicConfig, $rootScope, $timeout, $state, $location, $ionicHistory, $ionicPlatform) {\r\n        'ngInject';\r\n\r\n        let legacyGoBack, backButtonUnregister;\r\n\r\n        return {\r\n            init,\r\n            getDefaultOptions,\r\n            enable: enableFromService,\r\n            isEnabled,\r\n            transition,\r\n            registerToRouteEvents,\r\n            unregisterToRouteEvents,\r\n            registerToStateChangeStartEvent,\r\n            unregisterToStateChangeStartEvent,\r\n            disablePendingTransition,\r\n            locationUrl,\r\n            stateGo,\r\n            goBack\r\n        };\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#locationUrl\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Call location url and apply a native transition\r\n         * @param {string|null} url                 default:null\r\n         * @param {object|null} transitionOptions   default:null\r\n         */\r\n        function locationUrl(url = null, transitionOptions = null) {\r\n            if (!url) {\r\n                $log.debug('[native transition] cannot change url without url...');\r\n                return;\r\n            }\r\n            unregisterToStateChangeStartEvent();\r\n            var locationPromise = $location.url(url);\r\n            transition(transitionOptions);\r\n\r\n            return locationPromise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#stateGo\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Call state go and apply a native transition\r\n         * @param {string|null} state              default:null\r\n         * @param {object}      stateParams        default:{}\r\n         * @param {object}      stateOptions       default:{}\r\n         * @param {object|null} transitionOptions  default:null\r\n         */\r\n        function stateGo(state = null, stateParams = {}, stateOptions = {}, transitionOptions = null) {\r\n            if (!state) {\r\n                $log.debug('[native transition] cannot change state without a state...');\r\n                return;\r\n            }\r\n            if ($state.current.name === state && !stateOptions.reload) {\r\n                $log.debug('[native transition] same state transition are not possible');\r\n                return;\r\n            }\r\n            unregisterToStateChangeStartEvent();\r\n            transition(transitionOptions);\r\n            return $timeout(() => $state.go(state, stateParams, stateOptions));\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#enable\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * enable/disable plugin\r\n         * @param {boolean} enabled\r\n         * @param {boolean} disableIonicTransitions\r\n         * @param {string}  ionicTransitionType\r\n         */\r\n        function enableFromService(enabled = true, disableIonicTransitions = true, ionicTransitionType = 'platform') {\r\n            if (enabled && !(window.cordova && window.plugins && window.plugins.nativepagetransitions)) {\r\n                $log.debug('[native transition] is disabled or nativepagetransitions plugin is not present');\r\n                return;\r\n            }\r\n            enable = enabled;\r\n\r\n            if (enabled) {\r\n                $log.debug('[native transition] enabling plugin');\r\n                if (window.plugins && window.plugins.nativepagetransitions) {\r\n                    angular.extend(window.plugins.nativepagetransitions.globalOptions, getDefaultOptions());\r\n                }\r\n                $rootScope.$ionicGoBack = goBack;\r\n                if(!getDefaultOptions().hasAlreadyRegisterBackButtonAction) {\r\n                    backButtonUnregister = $ionicPlatform.registerBackButtonAction((e, count) => goBack(count), 100);\r\n                }\r\n                registerToRouteEvents();\r\n            } else {\r\n                $log.debug('[native transition] disabling plugin');\r\n                if (typeof arguments[1] === 'undefined') {\r\n                    disableIonicTransitions = false;\r\n                }\r\n                $rootScope.$ionicGoBack = legacyGoBack;\r\n                if (angular.isFunction(backButtonUnregister)) {\r\n                    backButtonUnregister.call();\r\n                }\r\n                unregisterToRouteEvents();\r\n            }\r\n\r\n            if (disableIonicTransitions) {\r\n                $log.debug('[native transition] disabling ionic transitions');\r\n                $ionicConfig.views.transition('none');\r\n            } else {\r\n                $log.debug('[native transition] enabling ionic transitions');\r\n                $ionicConfig.views.transition(ionicTransitionType);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        function transition() {\r\n            if (!isEnabled()) {\r\n                return;\r\n            }\r\n            let options = {}\r\n            if (angular.isObject(arguments[0])) {\r\n                options = angular.extend({}, defaultBackTransition, arguments[0])\r\n            } else if (angular.isString(arguments[0])) {\r\n                switch (arguments[0]) {\r\n                    case 'back':\r\n                        // First we check for state back transition\r\n                        if (arguments[2] && getBackStateTransition(arguments[2])) {\r\n                            options = getBackStateTransition(arguments[2]);\r\n                            console.log('back first', options)\r\n                        } // Then we check if the backInOppositeDirection option is enabled\r\n                        else if (getDefaultOptions().backInOppositeDirection && arguments[1] && getStateTransition(arguments[1])) {\r\n                            options = getStateTransition(arguments[1]);\r\n                            if (options.direction) {\r\n                                options.direction = oppositeDirections[options.direction];\r\n                            }\r\n                            console.log('back second', options)\r\n\r\n                        } // otherwise we just use the default transition\r\n                        else {\r\n                            options = defaultBackTransition;\r\n                            console.log('back default', options)\r\n                        }\r\n                        break;\r\n                }\r\n            } else {\r\n                options = defaultTransition;\r\n            }\r\n            options = angular.copy(options);\r\n            $log.debug('[native transition]', options);\r\n            let type = options.type;\r\n            delete options.type;\r\n            $rootScope.$broadcast('ionicNativeTransitions.beforeTransition');\r\n            window.plugins.nativepagetransitions[type](\r\n                options,\r\n                transitionSuccess.bind(this, getTransitionDuration(options)),\r\n                transitionError.bind(this, getTransitionDuration(options))\r\n            )\r\n        }\r\n\r\n        function transitionSuccess(duration) {\r\n            setTimeout(() => $rootScope.$broadcast('ionicNativeTransitions.success'), duration);\r\n        }\r\n\r\n        function transitionError(duration) {\r\n            setTimeout(() => $rootScope.$broadcast('ionicNativeTransitions.error'), duration);\r\n        }\r\n\r\n        function getTransitionDuration(options) {\r\n            let duration;\r\n            if (options.duration) {\r\n                duration = parseInt(options.duration);\r\n            } else {\r\n                duration = parseInt(getDefaultOptions().duration);\r\n            }\r\n            if (ionic.Platform.isAndroid()) {\r\n                if (options.androiddelay) {\r\n                    duration += parseInt(options.androiddelay);\r\n                } else {\r\n                    duration += parseInt(getDefaultOptions().androiddelay);\r\n                }\r\n            } else if (ionic.Platform.isIOS()) {\r\n                if (options.iosdelay) {\r\n                    duration += parseInt(options.iosdelay);\r\n                } else {\r\n                    duration += parseInt(getDefaultOptions().iosdelay);\r\n                }\r\n            } else if (ionic.Platform.isWindowsPhone()) {\r\n                if (options.winphonedelay) {\r\n                    duration += parseInt(options.winphonedelay);\r\n                } else {\r\n                    duration += parseInt(getDefaultOptions().winphonedelay);\r\n                }\r\n            }\r\n            return duration;\r\n        }\r\n\r\n        function executePendingTransition() {\r\n            window.plugins.nativepagetransitions.executePendingTransition();\r\n            // $rootScope.$broadcast('ionicNativeTransitions.', executePendingTransition);\r\n            registerToStateChangeStartEvent();\r\n        }\r\n\r\n        function disablePendingTransition() {\r\n            // If native transition support cancelling transition (> 0.6.4), cancel pending transition\r\n            if (window.plugins && window.plugins.nativepagetransitions && angular.isFunction(window.plugins.nativepagetransitions.cancelPendingTransition)) {\r\n                window.plugins.nativepagetransitions.cancelPendingTransition();\r\n                registerToStateChangeStartEvent();\r\n            } else {\r\n                executePendingTransition();\r\n            }\r\n        }\r\n\r\n        function registerToRouteEvents() {\r\n            unregisterToRouteEvents();\r\n            registerToStateChangeStartEvent();\r\n            // $stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', executePendingTransition);\r\n            $stateChangeError = $rootScope.$on('$stateChangeError', disablePendingTransition);\r\n            $stateAfterEnter = $rootScope.$on(getDefaultOptions().triggerTransitionEvent, executePendingTransition);\r\n        }\r\n\r\n        function registerToStateChangeStartEvent() {\r\n            if ($stateChangeStart) {\r\n                return;\r\n            }\r\n            $stateChangeStart = $rootScope.$on('$stateChangeStart', (event, toState, toParams, fromState, fromParams) => {\r\n                let options = null;\r\n                // Abort if event was preventDefault'ed\r\n                if (event.defaultPrevented) {\r\n                    return;\r\n                }\r\n                // Disable native transition for this state\r\n                if (toState.nativeTransitions === null) {\r\n                    $log.debug('[native transition] transition disabled for this state', toState);\r\n                    return;\r\n                }\r\n                options = getStateTransition(toState);\r\n                $log.debug('[native transition] $stateChangeStart', toState, options);\r\n                transition(options);\r\n            });\r\n        }\r\n\r\n        function getBackStateTransition(state) {\r\n            if (angular.isObject(state.nativeTransitionsBackIOS) && ionic.Platform.isIOS()) {\r\n                return angular.extend({}, state.nativeTransitionsBackIOS);\r\n            } else if (angular.isObject(state.nativeTransitionsBackAndroid) && ionic.Platform.isAndroid()) {\r\n                return angular.extend({}, state.nativeTransitionsBackAndroid);\r\n            } else if (angular.isObject(state.nativeTransitionsBackWindowsPhone) && ionic.Platform.isWindowsPhone()) {\r\n                return angular.extend({}, state.nativeTransitionsBackWindowsPhone);\r\n            } else if (angular.isObject(state.nativeTransitionsBack)) {\r\n                return angular.extend({}, state.nativeTransitionsBack);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function getStateTransition(state) {\r\n            if (angular.isObject(state.nativeTransitionsIOS) && ionic.Platform.isIOS()) {\r\n                return angular.extend({}, state.nativeTransitionsIOS);\r\n            } else if (angular.isObject(state.nativeTransitionsAndroid) && ionic.Platform.isAndroid()) {\r\n                return angular.extend({}, state.nativeTransitionsAndroid);\r\n            } else if (angular.isObject(state.nativeTransitionsWindowsPhone) && ionic.Platform.isWindowsPhone()) {\r\n                return angular.extend({}, state.nativeTransitionsWindowsPhone);\r\n            } else if (angular.isObject(state.nativeTransitions)) {\r\n                return angular.extend({}, state.nativeTransitions);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function unregisterToStateChangeStartEvent() {\r\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\r\n                $stateChangeStart();\r\n                $stateChangeStart = null;\r\n            }\r\n        }\r\n\r\n        function unregisterToRouteEvents() {\r\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\r\n                $stateChangeStart();\r\n                $stateChangeStart = null;\r\n            }\r\n            if ($stateChangeSuccess && angular.isFunction($stateChangeSuccess)) {\r\n                $stateChangeSuccess();\r\n                $stateChangeSuccess = null;\r\n            }\r\n            if ($stateChangeError && angular.isFunction($stateChangeError)) {\r\n                $stateChangeError();\r\n                $stateChangeError = null;\r\n            }\r\n            if ($stateAfterEnter && angular.isFunction($stateAfterEnter)) {\r\n                $stateAfterEnter();\r\n                $stateAfterEnter = null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#getDefaultOptions\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Get default options\r\n         */\r\n        function getDefaultOptions() {\r\n            return defaultOptions;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#init\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         *\r\n         * @description\r\n         * Init nativepagetransitions plugin\r\n         */\r\n        function init() {\r\n            legacyGoBack = $rootScope.$ionicGoBack;\r\n            if (!isEnabled()) {\r\n                $log.debug('[native transition] The plugin is either disabled or nativepagetransitions plugin by telerik is not present. If you are getting this message in a browser, this is normal behavior, native transitions only work on device.');\r\n                return;\r\n            } else {\r\n                enableFromService();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ionic-native-transitions.$ionicNativeTransitions#goBack\r\n         * @access public\r\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\r\n         * @description Navigate back in the current history stack with a back navigation transition\r\n         * @param {number} backCount - The number of views to go back to. default will be the previous view\r\n         */\r\n        function goBack(backCount) {\r\n\r\n            if (!$ionicHistory.backView()) {\r\n                // Close the app when no more history\r\n                if (navigator.app) {\r\n                    navigator.app.exitApp();\r\n                }\r\n                return;\r\n            }\r\n            if (backCount >= 0) {\r\n                return;\r\n            }\r\n            let stateName = $ionicHistory.backView().stateName;\r\n\r\n            // Use backCount to find next state only if its defined, else pass as it is to $ionicHistory.goBack\r\n            // which defaults to previous view transition\r\n            // Get current history stack and find the cursor for the new view\r\n            // Based on the new cursor, find the new state to transition to\r\n            if (!!backCount && !isNaN(parseInt(backCount))) {\r\n                let viewHistory = $ionicHistory.viewHistory();\r\n                let currentHistory = viewHistory.histories[$ionicHistory.currentView().historyId];\r\n                let newCursor = currentHistory.cursor + backCount;\r\n\r\n                // If new cursor is more than the max possible or less than zero, default it to first view in history\r\n                if (newCursor < 0 || newCursor > currentHistory.stack.length) {\r\n                    newCursor = 0;\r\n                }\r\n\r\n                stateName = currentHistory.stack[newCursor].stateName;\r\n            }\r\n            let currentStateTransition = angular.extend({}, $state.current);\r\n            let toStateTransition = angular.extend({}, $state.get(stateName));\r\n\r\n            unregisterToStateChangeStartEvent();\r\n            if (toStateTransition.nativeTransitionsBack === null) {\r\n                $log.debug('[native transition] transition disabled for this state', toStateTransition);\r\n                return $timeout(() => $ionicHistory.goBack(backCount)).then(() => registerToStateChangeStartEvent());\r\n            }\r\n            $log.debug('nativepagetransitions goBack', backCount, stateName, currentStateTransition, toStateTransition);\r\n            transition('back', currentStateTransition, toStateTransition);\r\n            return $timeout(() => $ionicHistory.goBack(backCount));\r\n        }\r\n    }\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** d:/git/ionic-native-transitions/lib/provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nexports['default'] = function ($log, $ionicNativeTransitions, $state) {\n    'ngInject';\n\n    return {\n        controller: controller,\n        restrict: 'A',\n        scope: false\n    };\n\n    function controller($scope, $element, $attrs, $state) {\n        'ngInject';\n\n        var stateOptions = $scope.$eval($attrs.nativeUiSrefOpts) || {};\n        var nativeOptions = null;\n\n        $attrs.$observe('nativeOptions', function (newOptions) {\n            var evalOptions = $scope.$eval(newOptions);\n            nativeOptions = angular.isObject(evalOptions) ? evalOptions : {};\n        });\n\n        $element.on('click', function (event) {\n            var ref = parseStateRef($attrs.nativeUiSref, $state.current.name);\n            var params = angular.copy($scope.$eval(ref.paramExpr));\n            if (!$ionicNativeTransitions.isEnabled()) {\n                $state.go(ref.state, params, stateOptions);\n                return;\n            }\n\n            $ionicNativeTransitions.stateGo(ref.state, params, nativeOptions, stateOptions);\n        });\n    }\n};\n\nfunction parseStateRef(ref, current) {\n    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\n        parsed;\n    if (preparsed) ref = current + '(' + preparsed[1] + ')';\n    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n    if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n    return {\n        state: parsed[1],\n        paramExpr: parsed[3] || null\n    };\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./lib/nativeSref.js\n **/","export default function($log, $ionicNativeTransitions, $state) {\r\n    'ngInject';\r\n\r\n    return {\r\n        controller: controller,\r\n        restrict: 'A',\r\n        scope: false\r\n    };\r\n\r\n    function controller($scope, $element, $attrs, $state) {\r\n        'ngInject';\r\n\r\n        let stateOptions = $scope.$eval($attrs.nativeUiSrefOpts) || {};\r\n        let nativeOptions = null;\r\n\r\n        $attrs.$observe('nativeOptions', (newOptions) => {\r\n            let evalOptions = $scope.$eval(newOptions);\r\n            nativeOptions = angular.isObject(evalOptions) ? evalOptions : {};\r\n        });\r\n\r\n        $element.on('click', (event) => {\r\n            let ref = parseStateRef($attrs.nativeUiSref, $state.current.name);\r\n            let params = angular.copy($scope.$eval(ref.paramExpr));\r\n            if (!$ionicNativeTransitions.isEnabled()) {\r\n                $state.go(ref.state, params, stateOptions);\r\n                return;\r\n            }\r\n\r\n            $ionicNativeTransitions.stateGo(ref.state, params, nativeOptions, stateOptions);\r\n        });\r\n    }\r\n}\r\n\r\nfunction parseStateRef(ref, current) {\r\n    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\r\n        parsed;\r\n    if (preparsed) ref = current + '(' + preparsed[1] + ')';\r\n    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\r\n    if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\r\n    return {\r\n        state: parsed[1],\r\n        paramExpr: parsed[3] || null\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** d:/git/ionic-native-transitions/lib/nativeSref.js\n **/","/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitions\r\n * @description\r\n * ionic-native-transitions service\r\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nexports['default'] = function ($ionicNativeTransitions, $ionicPlatform, $ionicHistory, $rootScope) {\n    'ngInject';\n\n    $ionicPlatform.ready(function () {\n        $ionicNativeTransitions.init();\n    });\n};\n\n;\nmodule.exports = exports['default'];\n/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\r\n * @description\r\n * ionic-native-transitions provider\r\n */\n\n\n/** WEBPACK FOOTER **\n ** ./lib/run.js\n **/","/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitions\r\n * @description\r\n * ionic-native-transitions service\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\r\n * @description\r\n * ionic-native-transitions provider\r\n */\r\nexport default function($ionicNativeTransitions, $ionicPlatform, $ionicHistory, $rootScope) {\r\n    'ngInject';\r\n\r\n    $ionicPlatform.ready(() => {\r\n        $ionicNativeTransitions.init();\r\n    });\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** d:/git/ionic-native-transitions/lib/run.js\n **/"],"sourceRoot":""}